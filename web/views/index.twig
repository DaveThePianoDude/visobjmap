{% extends "layout.html" %}
{% block content %}

<div class="jumbotron text-center">
  <div class="container">
    <h1>Visual Object Mapper</h1>
  </div>
</div>
<div class="container">
  <hr>
  <div class="row">
	<div class="col-xs-6">
		<div id="containerSource" style="height: 30px;">
			<input type="file" id="sourceFile" name="file" />
		</div>
	</div>
	<div class="col-xs-6">
		<div id="containerDest" style="height: 30px;">
			<input type="file" id="destFile" name="file" />
		</div>        
	</div>
  </div>
  <div class="row">
	<canvas id="layer1" height="400" style="position: absolute; left: 0; top: 500; z-index: 1;"></canvas>
	<canvas id="layer2" height="400" style="position: absolute; left: 0; top: 500; z-index: 0;"></canvas>
  </div>
</div>

<script lang="javascript">

	function Line (startX, startY, endX, endY)
	{
		this.startX = startX;
		this.startY = startY;
		this.endX = endX;
		this.endY = endY;
	}

	function Word(word, startX, startY)
	{
		this.word = word;
		this.startX = startX;
		this.startY = startY;
	}
	
	var leftMargin = 10;
	var topMargin = 20;
	
	var wordCanvas = document.getElementById("layer2");
	wordCanvas.style.backgroundColor = 'rgba(255,255,255, 0.2)';
	wordCanvas.width = window.innerWidth - leftMargin * 2;
	var wordContext = wordCanvas.getContext("2d");
	
	var drawCanvas = document.getElementById("layer1");
	drawCanvas.width = window.innerWidth - leftMargin * 2;
	var drawContext = drawCanvas.getContext("2d");
	
	var declTokenStr = "privatestring";
	
	var wordStartX = new Array();
	var wordStartY = new Array();
	var wordWord = new Array();
	
	function handleFileSelect(evt)
	{
	    var files = evt.target.files; // FileList object
	
	    // Loop through the FileList and render image files as thumbnails.
	    for (var i = 0, f; f = files[i]; i++)
	    {
	        var reader = new FileReader();
	        reader.onload = (function(reader)
	        {
	            return function()
	            {
	                var contents = reader.result;
	                contents = contents.replace(/ /g,'');
					var res = contents.match(/privatestring\D*;/g); 
					var first = res[0];
					var tokenArray = first.split(';');

					var x = $(evt.target).closest("div").offset().left;
					wordContext.fillStyle = "blue";
					wordContext.font = "bold 16px Arial";

					for (var j = 0; j < tokenArray.length; j++)
					{
					  var varName = tokenArray[j].trim();				  	  
					  var word = new Word(varName.substr(declTokenStr.length), x, topMargin + j*18);
					  
					  wordContext.fillText(word.word, word.startX, word.startY);			  
					  legacyWords.push(word);
					}
	            }
	        })(reader);
	
	        reader.readAsText(f);
	    }
	}
	
	var legacyLines = new Array();
	var legacyWords = new Array();
	
	var isDown;
	
	function redraw(){
		
		drawContext.strokeStyle = "#FFFFFF";
		drawContext.lineJoin = "round";
		drawContext.lineWidth = 5;
		
		drawContext.beginPath();
		drawContext.moveTo(startX, startY);
		drawContext.lineTo(oldX, oldY);
		drawContext.stroke();
			
		drawContext.strokeStyle = "#df4b26";
		drawContext.lineJoin = "round";
		
		drawContext.lineWidth = 2;
		
		for (var i = 0; i < legacyLines.length; i++)
		{
			var line = legacyLines[i];
			drawContext.beginPath();
			drawContext.moveTo(line.startX, line.startY);
			drawContext.lineTo(line.endX, line.endY);
			drawContext.stroke();
		}
		
		// legacy words
		for (var i = 0; i < legacyWords.length; i++)
		{
			var word = legacyWords[i];
			wordContext.fillText(word.word, word.startX, word.startY);
		}
		
		drawContext.lineWidth = 3;
								
		drawContext.beginPath();
		drawContext.moveTo(startX, startY);
		drawContext.lineTo(currX, currY);
		drawContext.stroke();
		
		oldX = currX;
		oldY = currY;
	}
	
	drawCanvas.onmousedown = function(e){
		startX = e.pageX - this.offsetLeft;
		startY = e.pageY - this.offsetTop;
		oldX = startX;
		oldY = startY;
		currX = startX;
		currY = startY;
		
		isDown = true;
		redraw();
	};

	drawCanvas.onmousemove = function(e){
		if(isDown){
			currX = e.pageX - this.offsetLeft;
			currY = e.pageY - this.offsetTop;
			redraw();
		}
	};

	drawCanvas.onmouseup = function(e){
	
		var line = new Line(startX, startY, currX, currY);
		
		legacyLines.push(line);
	
		isDown = false;
	};

	document.getElementById('sourceFile').addEventListener('change', handleFileSelect, false);
	document.getElementById('destFile').addEventListener('change', handleFileSelect, false);
</script>


{% endblock %}